def mkStack(k) |>
      def empty(k)  & none() |> k(S Z) & none()
      or  empty(k)  & some(x,e,push,pop) |> k(Z) & some(x,e,push,pop)
      or  push(x,k) & none() |> def c(emp,push,pop) |> some(x,emp,push,pop) & k()
                                 in mkStack(c)
      or  push(x,k) & some(x',emp',push',pop') |> def c() |> some(x, emp', push', pop') & k()
                                                   in push'(x', c)
      or  pop(k)    & some(x',emp',push',pop') |> def e(b) |> match b with S Z -> def r(x) |> none()
                                                                                  in pop'(r)
                                                                         | Z   -> def r(x) |> some(x, emp', push', pop')
                                                                                  in pop'(r)
                                                 in emp'(e) & k(x')
      or  pop(k)    & none() |> k()
      in none() & k(empty, push, pop)
in def instance(em,pu,po) |> def k1()  |> pu(S S Z, k2)
                              or k2()  |> pu(S S S Z, k3)
                              or k3()  |> po(k4)
                              or k4(x) |> top(x) & po(k5)
                              or k5(x) |> middle(x) & po(k6)
                              or k6(x) |> bottom(x)
                              in pu(S Z, k1)
    in mkStack(instance)
