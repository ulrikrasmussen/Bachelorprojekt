def
    initTrans<nmType, dest, ret> |> def
            ack<SynAck, 0>
          & waitSynAck<>   |> { do print("got synack"); match nmType with
                                Sync  -> { run ret<sendSync> }
                              | Async -> { run ret<sendAsync>}
                            } & lineClear<>

         or ack<DataAck(dat), ackN>
          & waitAck<>
          & pNum<cur> |> {match eq(ackN, cur) with
                            True -> { match nmType with
                                            Sync  -> { run runRecvCont<dat> }
                                          | Async -> { run 0 }
                                    ; run pNum<cur> & lineClear<>}
                          | False -> { do print("got unexpected ack x_x.. shouldn't happen.\n")
                                     ; run pNum<cur> & waitAck<>}
                        }

         or runRecvCont<data> & recvCont<k> |> match data with
                                                 Just data' -> k<data'>
                                               | Nothing    -> k<>

         or retransmit<pl,n> & pNum<cur> & waitAck<> |> { match eq(n, cur) with
                                                   True  -> { run send<pl>}
                                                 | False -> { run 0}
                                               } & pNum<cur> & waitAck<>

         or send<payload> & pNum<n> |> pNum<n> & dest<Data(payload), n> & 10:retransmit<payload, n>

         or sendAsync<payload>      & pNum<n> & lineClear<> |> {do print("sendasync");let n' = add(1,n); run waitAck<> & send<payload> & pNum<n'>}
         or sendSync<payload, cont> & pNum<n> & lineClear<> |> {let n' = add(1,n); run waitAck<> & send<payload> & recvCont<cont> & pNum<n'>}

         or sendSyn<> |> {do print("sending syn")} & dest<Syn(ack), 0> & 10:retrSyn<> & waitSynAck<>
         or retrSyn<> & waitSynAck<> |> sendSyn<>

         in pNum<0> & sendSyn<>
 in
    def
      connect<ret> |> { let serverTest = search("serverTest")
                      ; match serverTest with
                          Just sTest -> { run ret<sTest>}
                        | Nothing      -> { run 1:connect<ret> }
                      }

     in
        { let Pair(sPrint, sMult) = connect()
        ; let proxPrint = initTrans(Async, sPrint)
        ; run 1:proxPrint<"1 - Test\n">
            & 20:proxPrint<"2 - Test\n">
            & 20:proxPrint<"3 - Test\n">
            & 20:proxPrint<"4 - Test\n">
            & 20:proxPrint<"5 - Test\n">
        }
