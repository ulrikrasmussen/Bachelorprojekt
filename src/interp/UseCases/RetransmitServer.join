def
   listen<nm, ret> |> {let timeout = 1000; run
     def
         receive<Syn(ack), num> |> {do print("got syn")} & ackNm<ack> & ack<SynAck, num> & pNum<num>

      or receive<Data(data), next>
       & pNum<cur> & ackNm<ack>
       & lastResult<lr> |> { match leq(next, cur) with
                             True  -> { run pNum<cur> & ackNm<ack> & ack<DataAck(lr), next> & lastResult<lr>}
                           | False -> { run pNum<next> & ackNm<ack>
                                    & match nm with
                                        Sync(nm') -> { let ret = nm'(data); run ack<DataAck(Just(ret)), next> & lastResult<ret> }
                                      | Async(nm') -> { run ack<DataAck(Nothing), next> & lastResult<Nothing> }
                                      }
                           }
      in ret<receive> & lastResult<Nothing>
     }
 or servPrint<txt> |> print<txt>
 or servMult(Con(a, Con(b, Nil))) |> {return mult(a,b) to servMult}
 in { let expoPrint = listen(Async(servPrint))
    ; let expoMult  = listen(Sync(servMult))
    ; do register("serverPrint", expoPrint)
    ; do register("serverMult", expoPrint)
    }

