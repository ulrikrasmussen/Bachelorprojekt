% vim:set filetype=noweb:
% use notangle Retransmit.noweb (apt-get noweb) to generate join file.
% vim syntax highlighting is provided in misc/noweb.vim

In the following is an attempt at defining a rudimentary protocol for guarranteed delivery of messages,
based on the same fundamental techniques as TCP.

The use of the library is made somewhat transparent to the programmer, as the only visible indication
of the use of the library is in the initial exchange of names between machines, because new names that
will serve as managed message proxies need to be created. These names will then take the place of the
original unmanaged name when invoking atoms.

Overall, the library consists of two parts:

<<*>>=
  def
     <<Exposing a name for proxied communication>>
   or
     <<Communicating with a proxied name>>
   in 0
@

\paragraph{Instantiating the receiving side} of the communication channel produces a nested def that
takes care of sending acks upon the reception af a name invocation, while returning a name that will
serve as the communication proxy.

A notable limitation to the current simple implementation is that only one sender can be allowed pr
name proxy, as the bookkeeping mechanics are tied to the session. It could easily be extended by
adding session numbers to the \texttt{SynAck} and subsequent transfers, as well as \texttt{pNum},
or perhaps even more promising by simply creating a new def pr \texttt{Syn}.

Also, it is currently impossible to act upon a irrevocably dead connection.

<<Exposing a name for proxied communication>>=
   listen<nm, ret> |> def
         receive<typ, n> & init<> |> match typ with
                                            Syn(ack) -> ackNm<ack> & ack<SynAck, n> & pNum<n>

      or receive<typ, next>
       & pNum<cur> & ackNm<ack>
       & lastResult<lr> |> { let Data(data) = typ;
                           ; match leq(next, cur) with
                               True  -> { run pNum<cur>  & ackNm<ack> & ack<DataAck(lr), next> & lastResult<lr>}
                             | False -> { run pNum<next> & ackNm<ack>
                                      & match nm with
                                          Sync(nm') -> { let ret = nm'(data); run ack<DataAck(Just(ret)), next> & lastResult<Just(ret)> }
                                        | Async(nm') -> { run nm'<data> & ack<DataAck(Nothing), next> & lastResult<Nothing> }
                                        }
                           }
      in ret<receive> & lastResult<Nothing> & init<>
@

Upon receiving a \texttt{Syn} message, the name to send acknowledgements to is saved for later.
Subsequent communications use the recorded ack-name for confirming reception of new messages, or retransmitting results if it
detects a retransmit from the sender, indicated by a lower packet number than the one currently recorded.

\paragraph{Initialising the communication} is done by the sending party, by means of sending \texttt{Syn} packets until receiving
a \texttt{SynAck}, indicating that the receiving party has accepted the communication.

<<Communicating with a proxied name>>=
    initTrans<nmType, dest, ret> |> def
            ack<typ, ackN>
          & pNum<cur>
          & waitAck<>   |> { match typ with
                               SynAck -> { run match nmType with
                                           Sync  -> { run ret<sendSync> }
                                         | Async -> { run ret<sendAsync>}
                                         & lineClear<> & pNum<0>}
                             | DataAck(dat) -> { match eq(ackN, cur) with
                                                   True -> { match nmType with
                                                                   Sync  -> { run runRecvCont<dat> }
                                                                 | Async -> { run 0 }
                                                           ; run pNum<cur> & lineClear<>}
                                                 | False -> { do print("got unexpected ack x_x.. shouldn't happen.\n")
                                                            ; run pNum<cur> & waitAck<>} }
                           }

         or runRecvCont<data> & recvCont<k> |> match data with
                                                 Just data' -> k<data'>
                                               | Nothing    -> k<>

         or retransmit<pl,n> & pNum<cur> & waitAck<> |> { match eq(n, cur) with
                                                   True  -> { run send<pl>}
                                                 | False -> { run 0}
                                               } & pNum<cur> & waitAck<>

         or send<payload> & pNum<n> |> { run pNum<n> & dest<Data(payload), n>
                                       ; run 10:retransmit<payload, n>
                                       }

         or sendAsync<payload>      & pNum<n> & lineClear<> |> {let n' = add(1,n); run waitAck<> & send<payload> & pNum<n'>}
         or sendSync<payload, cont> & pNum<n> & lineClear<> |> {let n' = add(1,n); run waitAck<> & send<payload> & recvCont<cont> & pNum<n'>}

         or sendSyn<> |> { run dest<Syn(ack), 0>
                         ; run 10:retrSyn<> & waitAck<>}
         or retrSyn<> & waitAck<> |> sendSyn<>

         in pNum<0> & sendSyn<>
@

