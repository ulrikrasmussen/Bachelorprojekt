def
    -- nm :: Sync| ASync
    listen<nm, ret> |> {let timeout = 1000; run 
    def
        receive<Syn(ack), num> |> ackNm<ack> & ack<SynAck, num> & pNum<num>

        receive<Data(data), next> & pNum<cur> & ackNm<ack> |> match eq(cur, next) with
                                                                True  -> ackNm<ack> & ack<DataAck, next> -- retransmit ACK
                                                              | False -> 
     in ret<receive>
  }

  or initTrans<nm, dest, ret> |> { let timeout = 1000; run
    def 

       ack<type, ackN> & waitAck<> & pNum<cur> |> match eq(ackN,cur) with
                                                    True -> (match type with
                                                                    SynAck -> match nm with
                                                                                Sync(nm')  -> ret<sendSync>
                                                                              | ASync(nm') -> ret<sendAsync>
                                                                  | DataAck -> match nm with
                                                                                Sync(nm') -> runRecvCont<>
                                                                              | Async(nm') -> 0
                                                            ) & pNum<cur>
                                                            
                                                  | False -> 0 -- the ack is old

     

     or retransmit<pl> & waitAck<> |> send<pl>

     or send<payload> & pNum<n> |> pNum<n>
                                & dest<Data(payload), n'>
                                & {sleep(timeout); run retransmit<payload>}
                                & waitAck<>}

     or sendAsync<payload> & pNum<n> |> {let n' = add(1,n); run send<payload> & pNum<n'>}
     or sendSync<payload, cont> & pNum<n> |> {let n' = add(1,n); run send<payload> & recvCont<cont> & pNum<n'>}

     or sendSyn<> |> dest<Syn(ack), 0> & sleep<timeout, retrSyn> & waitAck<>
     or retrSyn<> & waitAck<> |> sendSyn<>

     in pNum<0> & sendSyn<>
  in
    0
  }
