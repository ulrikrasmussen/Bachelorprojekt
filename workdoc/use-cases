We present here some use cases for a language based on the distributed join
calculus.


Distributed queries in sensor networks
======================================
In `bonnet2001towards`_, the concept of sensor databases is introduced, in which
a set of sensors is queried using an extension of SQL, enabling the user to
extract very specific datasets from the network. The queries are executed in a
distributed fashion, so the sensors only transmit data relevant to the query.
For high-resolution sensors generating vast amounts of data, processing the
data locally is cheaper than transmitting it for offline processing, leading to
a more efficient usage of resources for bandwidth and battery constrained
devices.

The `COUGAR project`_ has already done a lot of research in this area, and
a complete system for executing declarative queries in a distributed fashion
has already been created. However, it would be interesting to see if a
join-calculus based language would prove useful for expressing programs that
essentially does the same as a distributed query.


Example scenario
----------------
The example is heavily inspired by `bonnet2001towards`_, and evolves around a
factory warehouse setting where each item has a stick-on sensor that measures
the temperature. There are also sensors on the walls and ceilings. All sensors
has a unique id. By querying the central processing nodes, it is possible to
retrieve coordinates for a given sensor id (determined by triangulation or
proximity to known reference points).

We will try to implement some of the same queries mentioned in the article:

- From all sensors, continuously return all temperatures over a given
  threshold.

- From all sensors on a given floor, continously return the average temperature
  measured over the last minute.

- When two sensors in close proximity to each other in a given time window
  measure a temperature above a given threshold, generate an event.


Assumptions about the underlying system
---------------------------------------
We will assume a network topology with one or more central processing nodes
which is connected to the sensors in a star pattern, using unreliable
communication channels (i.e. some sort of radio protocol). The runtime system
will assure that messages are delivered atomically between phyiscal units, as
long as they have an established communication channel. However, units may
temporarily come out of contact and become unavailable for extended periods of
time. The central processing nodes will always be available.

Since we don't have a mature, compiled language, we will not focus too much on
memory and processor constraints on the processing nodes in this use case, since
the resource usage depends a lot on the implementation.


.. _bonnet2001towards: @conference{bonnet2001towards,
          title={{Towards sensor database systems}},
          author={Bonnet, P. and Gehrke, J. and Seshadri, P.},
          booktitle={Mobile Data Management},
          pages={3--14},
          year={2001},
          organization={Springer}
        }

.. _COUGAR project: http://www.cs.cornell.edu/bigreddata/cougar/index.php
